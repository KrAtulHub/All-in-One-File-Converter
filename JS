

    // === FUNCTIONS ===
    
    function getFileType(fileName) {
        const extension = fileName.split('.').pop().toLowerCase();
        for (const type in fileTypes) {
            if (fileTypes[type].exts.includes(extension)) {
                return { type, extension };
            }
        }
        return { type: 'unknown', extension };
    }

    function handleFileSelect(file) {
        if (!file) return;
        currentFile = file;

        const { type, extension } = getFileType(currentFile.name);
        
        if (type === 'unknown') {
            alert('Sorry, this file type is not supported.');
            return;
        }

        // Update UI with file info
        fileNameEl.textContent = currentFile.name;
        fileSizeEl.textContent = `${(currentFile.size / 1024 / 1024).toFixed(2)} MB`;
        fileIconEl.src = fileTypes[type].icon;

        // Configure UI based on file type
        configureUiForFileType(type, extension);

        // Switch views
        uploadView.classList.add('hidden');
        processingView.classList.remove('hidden');
        resultContainer.classList.add('hidden');
    }

    function configureUiForFileType(type, extension) {
        // Reset all panels first
        [toPdfPanel, fromPdfPanel, imagePanel].forEach(p => {
            p.classList.add('disabled');
            p.classList.remove('active');
        });
        [toPdfBtn, fromPdfBtn, imageBtn].forEach(b => b.disabled = true);
        
        if (type === 'pdf') {
            fromPdfPanel.classList.remove('disabled');
            fromPdfPanel.classList.add('active');
            fromPdfBtn.disabled = false;
        } else if (type === 'image') {
            toPdfPanel.classList.remove('disabled');
            toPdfPanel.classList.add('active');
            toPdfBtn.disabled = false;
            
            imagePanel.classList.remove('disabled');
            imagePanel.classList.add('active');
            imageBtn.disabled = false;
            populateImageFormats(extension);
        } else if (['word', 'excel', 'powerpoint', 'text'].includes(type)) {
            toPdfPanel.classList.remove('disabled');
            toPdfPanel.classList.add('active');
            toPdfBtn.disabled = false;
        }
    }
    
    function populateImageFormats(sourceExt) {
        const formatSelect = document.getElementById('image-format');
        formatSelect.innerHTML = '';
        const targetFormats = imageFormats[sourceExt] || [];
        targetFormats.forEach(format => {
            const option = document.createElement('option');
            option.value = format;
            option.textContent = format.toUpperCase();
            formatSelect.appendChild(option);
        });
    }

    function simulateConversion(format) {
        showLoader(`Converting to ${format.toUpperCase()}...`);
        alert(`Simulating Conversion\n\nFile: ${currentFile.name}\nTarget Format: ${format}\n\nNOTE: This is a frontend simulation. A real backend with tools like LibreOffice or ImageMagick would be required for actual conversion.`);

        setTimeout(() => {
            hideLoader();
            displayDownloadLink(format);
        }, 2000);
    }
    
    function displayDownloadLink(format) {
        const originalFileName = currentFile.name.replace(/\.[^/.]+$/, "");
        const newFileName = `${originalFileName}.${format}`;
        resultContainer.innerHTML = `
            <p class="result-message">File successfully converted!</p>
            <a href="#" class="btn" download="${newFileName}">Download ${newFileName}</a>
        `;
        resultContainer.classList.remove('hidden');
    }

    function resetToInitialState() {
        currentFile = null;
        fileInput.value = '';
        processingView.classList.add('hidden');
        uploadView.classList.remove('hidden');
    }

    function showLoader(text) {
        loaderText.textContent = text;
        loaderOverlay.classList.remove('hidden');
    }

    function hideLoader() {
        loaderOverlay.classList.add('hidden');
    }
});
